{
  "compilerOptions": {
    "target": "esnext", // 指定ECMAScript目标版本。
    "useDefineForClassFields": true, // Emit ECMAScript-standard-compliant class fields.
    "module": "esnext", // 指定生成哪个模块系统代码。
    "moduleResolution": "node", // 决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）
    "strict": false, // 启用所有严格类型检查选项。
    "jsx": "preserve", // 在.tsx文件里支持JSX："React"或"Preserve"。
    "sourceMap": true, // 生成相应的.map文件。
    "resolveJsonModule": true, // 允许导入.json文件。
    "esModuleInterop": true, // Emit additional JavaScript to ease support for importing CommonJS modules. This enables allowSyntheticDefaultImports for type compatibility.
    "lib": ["esnext", "dom"], // 编译过程中需要引入的库文件的列表。针对于--target ES5：DOM，ES5，ScriptHost，--target ES6：DOM，ES6，DOM.Iterable，ScriptHost
    "noImplicitAny": false, // 允许any
    "allowJs": true, // 允许使用JS
    "checkJs": false, // 不检查检查JS
    "skipDefaultLibCheck": true, // 忽略库的默认声明文件的类型检查。
    "skipLibCheck": true, // 忽略所有的声明文件（*.d.ts）的类型检查。
    "isolatedModules": true, // 将每个文件作为单独的模块（与“ts.transpileModule”类似）。
    "allowUnreachableCode": true, // 不报告执行不到的代码错误。
    "allowUnusedLabels": true, // 不报告未使用的标签错误。
    "allowSyntheticDefaultImports": true,
    "baseUrl": ".", // 解析非相对模块名的基准目录。
    "paths": { // 模块名到基于baseUrl的路径映射的列表
      "@/*": [
        "./src/*"
      ]
    },
  },
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue", "src/fower/index.js"],
  "exclude": ["node_modules"] // 排除文件
}
